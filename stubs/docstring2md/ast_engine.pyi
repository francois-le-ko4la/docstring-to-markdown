import ast
from _typeshed import Incomplete
from collections import deque
from docstring2md.__config__ import LOG_MSG as LOG_MSG, Tag as Tag
from docstring2md.convmd import ConvMD as ConvMD
from docstring2md.log import logger as logger
from typing import Any, Callable, NamedTuple, Optional, TypeVar, Union

F = TypeVar('F', bound=Callable[..., Any])
ASTVisitedNode: Incomplete
ASTClassFunc: Incomplete

def logger_ast(func: F) -> F: ...

class NodeLink(NamedTuple):
    level: int
    parent: Optional[ASTVisitedNode]

class ModuleDef(NamedTuple):
    docstring: str
    def get_summary(self) -> str: ...
    def get_docstring(self) -> str: ...

class NodeDef(NamedTuple):
    title: str
    definition: str
    docstring: str
    level: int
    def get_summary(self) -> str: ...
    def get_toc_elem(self) -> str: ...
    def get_title(self) -> str: ...
    def get_definition(self) -> str: ...
    def get_docstring(self) -> str: ...
NodeListType = deque[Union[NodeDef, ModuleDef]]

class ObjVisitor(ast.NodeVisitor):
    def __init__(self, module_docstring: bool = ..., private_def: bool = ...) -> None: ...
    @property
    def node_lst(self) -> NodeListType: ...
    @staticmethod
    def parse(source: str) -> ast.AST: ...
    def visit_Module(self, node: ast.Module) -> None: ...
    def visit_ClassDef(self, node: ast.ClassDef) -> None: ...
    def visit_FunctionDef(self, node: ast.FunctionDef) -> None: ...
